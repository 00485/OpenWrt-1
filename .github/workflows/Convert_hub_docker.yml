#========================================================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Use Releases file to packaging
# Cron: min (0 - 59) / hour (0 - 23) / day of month (1 - 31) / month (1 - 12) / day of week (0 - 6)(Sunday - Saturday)
#========================================================================================================================
name: 转换rootfs为hub docker固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
    #- cron: '05 2 * * 4'

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: Config/docker.config
  DIY_P1_SH: sh/quick.sh
  DIY_P2_SH: sh/lean2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  OWRT_IP: 192.168.1.110
  OWRT_NAME: OneCloudOP
  OWRT_FILES: docker/files  
  TZ: Asia/Shanghai

jobs:
  build_burn_onecloud_hubdocker:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查项目
      uses: actions/checkout@main
 
    - name: 检查分配的服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT 

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if [[ $REPO_URL == *"lede"* ]]; then
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
          sudo -E apt-get -qq install libfuse-dev dos2unix          
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          
        elif [[ $REPO_URL == *"immortalwrt"* ]]; then
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo -E apt-get -qq install dos2unix
          
        fi  
        
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 克隆源仓库
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 检查docker环境
      working-directory: /workdir
      run: |
        echo "docker buildx 版本"
        docker buildx version
        echo "ls -l /proc/sys/fs/binfmt_misc"
        ls -l /proc/sys/fs/binfmt_misc
        echo "docker run --privileged --rm tonistiigi/binfmt --install all"
        docker run --privileged --rm tonistiigi/binfmt --install all
        echo "ls -l /proc/sys/fs/binfmt_misc"
        ls -l /proc/sys/fs/binfmt_misc
        echo "docker buildx ls"
        docker buildx ls
        
    - name: 生成hub docker固件
      id: hubdocker
      run: |
        mkdir -p hubdocker
        mv $GITHUB_WORKSPACE/docker/rc.local hubdocker/rc.local
        mv $GITHUB_WORKSPACE/docker/.dockerignore hubdocker/.dockerignore
        mv $GITHUB_WORKSPACE/docker/Dockerfile hubdocker/Dockerfile
        mv $GITHUB_WORKSPACE/docker/build-docker.sh hubdocker/build-docker.sh
        
        #转换为.tar.gz文件
        curl -L -o hubdocker/openwrt-armvirt-onecloud-rootfs.tar https://github.com/rmoyulong/OneCloud_OpenWrt/releases/download/OpenWrt_immortalwrt_23.12.15_02.51.30/immortalwrt-meson-meson8b-thunder-onecloud-rootfs.tar
        
        tar -czvf hubdocker/openwrt-armvirt-onecloud-rootfs.tar.gz hubdocker/openwrt-armvirt-onecloud-rootfs.tar
        
        cd hubdocker
        dos2unix ./*.sh
        dos2unix ./rc.local
        chmod +x ./*.sh
        chmod +x ./rc.local
        
        sudo bash build-docker.sh
        
        gzip -dc $OUTDIR/*.gz | docker load
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        
        docker tag mojialin/openwrt_onecloud mojialin/openwrt_onecloud:${{ env.TAG }}
        
        docker push mojialin/openwrt_onecloud
        docker push mojialin/openwrt_onecloud:${{ env.TAG }}
        
        #cd ..
        #docker_name=docker-img-openwrt-oncloud-${{ env.TAG }}.gz
        #mv hubdocker/opt/imgs/$docker_name openwrt/bin/targets/*/*/$docker_name
        
        echo "::set-output name=status::success"
        
    - name: 整理固件
      id: organize
      #if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        #rm openwrt/bin/targets/*/*/*.tar
        #mv hubdocker/openwrt-armvirt-onecloud-rootfs.tar.gz openwrt/bin/targets/*/*/openwrt-armvirt-onecloud-rootfs.tar.gz
        
        #cd openwrt/bin/targets/*/*
        #rm -rf packages
        
        cd hubdocker/opt/imgs/
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传firmware到cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        
    - name: 上传firmware到WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        
    - name: 生成标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
        #信息
        export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        export OWRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)
        echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
        echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV

    - name: 上传rootfs
      uses: rmoyulong/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: OpenWrt_${{ env.OWRT_SOURCE }}_${{ env.OWRT_DATE }}
        files: ${{ env.FIRMWARE }}/*
        body: |
          自用玩客云一站hub docker固件-[docker版底包]
          =============基本信息============

          源码：${{env.OWRT_SOURCE}}
          密码：password
          地址：${{env.OWRT_IP}}

    - name: 清理Releases
      uses: rmoyulong/delete-older-releases@master
      with:
        keep_latest: 10
        delete_tags: true

    - name: 清理Workflows
      uses: rmoyulong/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 1
