name: OneCloud Plus Images

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  #schedule:
    #- cron: 1 20 * * 4

# 点赞☆Star触发编译
#  watch:
#    types: [started]

#权限
permissions: write-all 

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: Config/arm7_mini.config
  DIY_P1_SH: sh/lean1.sh
  DIY_P2_SH: sh/Settings.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  OWRT_IP: 192.168.1.110
  OWRT_NAME: OneCloud
  OWRT_FILES: onecloud/files
  USE_CACHEWRTBUILD: true
  TZ: Asia/Shanghai 

jobs:
  Build_meson8b_OneCloud:
    runs-on: ubuntu-latest
    steps:
    - name: 检查项目
      uses: actions/checkout@v3
      
    - name: 检查分配的服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo -E rm -rf $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "1{s/\r$//;p;q}")
        sudo -E apt -yqq update
        sudo -E apt -yqq purge $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "2{s/\r$//;p;q}")
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq install $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "3{s/\r$//;p;q}")
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir  
        
    - name: 检查脚本
      run: |
        cd ./sh

        dos2unix ./*.sh
        chmod +x ./*.sh        
        
    - name: 克隆源仓库
      working-directory: /workdir    
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新安装订阅源
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
         rm -rf ./tmp* ./.config*
        [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && mv $GITHUB_WORKSPACE/$CONFIG_FILE .config
        cp -rf $GITHUB_WORKSPACE/ax6/banner package/base-files/files/etc/banner
        $GITHUB_WORKSPACE/$DIY_P2_SH
               
    - name: 自定义IMAGS格式 - meson8b cortex-a5+vfpv4
      run: |
        cp -rf $GITHUB_WORKSPACE/$OWRT_FILES openwrt/files
        cd openwrt && make defconfig
        
    - name: 下载编译环境
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=s

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: 整理固件
      id: assemble_artifact
      run: |
        rm -rf ./ARM_Out
        mkdir -p ./ARM_Out/
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }
        
        rom=openwrt/bin/targets/meson/meson8b/openwrt-*.img.gz
        getmd5 $rom
                
        cp -a $rom ./ARM_Out/openwrt-$(date +%Y%m%d)_${md5}.img.gz
               
    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: meson8b
        path: ARM_Out/*.img.gz 

    - name: 上传配置文件
      uses: actions/upload-artifact@main
      with:
        name: meson8b-config
        path: openwrt/.config  
 
    - name: 上传脚本包
      uses: actions/upload-artifact@main
      with:
        name: armv7-Packages
        path: openwrt/bin/packages 


    - name: 生成标记和标签
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="meson8b-$(date +%Y%m%d)"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT       

    - name: 生成标签上传
      uses: ncipollo/release-action@v1
      with:
        artifacts: ARM_Out/*.img.gz
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.GITHUB_TOKEN }}                        
